// Mocks generated by Mockito 5.1.0 from annotations
// in deliver/test/helper/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i17;
import 'dart:io' as _i32;
import 'dart:ui' as _i11;

import 'package:deliver/box/avatar.dart' as _i27;
import 'package:deliver/box/bot_info.dart' as _i14;
import 'package:deliver/box/contact.dart' as _i56;
import 'package:deliver/box/dao/block_dao.dart' as _i48;
import 'package:deliver/box/dao/custom_notification_dao.dart' as _i63;
import 'package:deliver/box/dao/media_dao.dart' as _i64;
import 'package:deliver/box/dao/media_meta_data_dao.dart' as _i70;
import 'package:deliver/box/dao/message_dao.dart' as _i19;
import 'package:deliver/box/dao/mute_dao.dart' as _i51;
import 'package:deliver/box/dao/room_dao.dart' as _i22;
import 'package:deliver/box/dao/seen_dao.dart' as _i38;
import 'package:deliver/box/dao/shared_dao.dart' as _i46;
import 'package:deliver/box/dao/uid_id_name_dao.dart' as _i52;
import 'package:deliver/box/livelocation.dart' as _i36;
import 'package:deliver/box/media.dart' as _i65;
import 'package:deliver/box/media_meta_data.dart' as _i68;
import 'package:deliver/box/media_type.dart' as _i66;
import 'package:deliver/box/member.dart' as _i57;
import 'package:deliver/box/message.dart' as _i20;
import 'package:deliver/box/muc.dart' as _i60;
import 'package:deliver/box/pending_message.dart' as _i21;
import 'package:deliver/box/role.dart' as _i61;
import 'package:deliver/box/room.dart' as _i23;
import 'package:deliver/box/seen.dart' as _i2;
import 'package:deliver/box/uid_id_name.dart' as _i53;
import 'package:deliver/localization/i18n.dart' as _i49;
import 'package:deliver/models/account.dart' as _i12;
import 'package:deliver/repository/accountRepo.dart' as _i58;
import 'package:deliver/repository/analytics_repo.dart' as _i16;
import 'package:deliver/repository/authRepo.dart' as _i26;
import 'package:deliver/repository/avatarRepo.dart' as _i47;
import 'package:deliver/repository/botRepo.dart' as _i62;
import 'package:deliver/repository/contactRepo.dart' as _i54;
import 'package:deliver/repository/fileRepo.dart' as _i31;
import 'package:deliver/repository/liveLocationRepo.dart' as _i35;
import 'package:deliver/repository/mediaRepo.dart' as _i67;
import 'package:deliver/repository/mucRepo.dart' as _i59;
import 'package:deliver/repository/roomRepo.dart' as _i24;
import 'package:deliver/services/core_services.dart' as _i45;
import 'package:deliver/services/data_stream_services.dart' as _i40;
import 'package:deliver/services/file_service.dart' as _i34;
import 'package:deliver/services/firebase_services.dart' as _i30;
import 'package:deliver/services/muc_services.dart' as _i39;
import 'package:deliver/shared/language.dart' as _i50;
import 'package:deliver_public_protocol/pub/v1/channel.pbgrpc.dart' as _i7;
import 'package:deliver_public_protocol/pub/v1/core.pbgrpc.dart' as _i43;
import 'package:deliver_public_protocol/pub/v1/group.pbgrpc.dart' as _i6;
import 'package:deliver_public_protocol/pub/v1/live_location.pbgrpc.dart'
    as _i5;
import 'package:deliver_public_protocol/pub/v1/models/activity.pb.dart' as _i25;
import 'package:deliver_public_protocol/pub/v1/models/call.pb.dart' as _i44;
import 'package:deliver_public_protocol/pub/v1/models/contact.pb.dart' as _i55;
import 'package:deliver_public_protocol/pub/v1/models/file.pb.dart' as _i33;
import 'package:deliver_public_protocol/pub/v1/models/location.pb.dart' as _i37;
import 'package:deliver_public_protocol/pub/v1/models/media.pb.dart' as _i69;
import 'package:deliver_public_protocol/pub/v1/models/message.pb.dart' as _i41;
import 'package:deliver_public_protocol/pub/v1/models/muc.pb.dart' as _i13;
import 'package:deliver_public_protocol/pub/v1/models/phone.pb.dart' as _i28;
import 'package:deliver_public_protocol/pub/v1/models/seen.pb.dart' as _i42;
import 'package:deliver_public_protocol/pub/v1/models/session.pb.dart' as _i29;
import 'package:deliver_public_protocol/pub/v1/models/uid.pb.dart' as _i3;
import 'package:deliver_public_protocol/pub/v1/profile.pbgrpc.dart' as _i4;
import 'package:deliver_public_protocol/pub/v1/query.pbgrpc.dart' as _i15;
import 'package:grpc/grpc.dart' as _i10;
import 'package:grpc/service_api.dart' as _i9;
import 'package:logger/logger.dart' as _i18;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rxdart/rxdart.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSeen_0 extends _i1.Fake implements _i2.Seen {}

class _FakeUid_1 extends _i1.Fake implements _i3.Uid {}

class _FakeAccessTokenRes_2 extends _i1.Fake implements _i4.AccessTokenRes {}

class _FakeCreateLiveLocationRes_3 extends _i1.Fake
    implements _i5.CreateLiveLocationRes {}

class _FakeGroupServiceClient_4 extends _i1.Fake
    implements _i6.GroupServiceClient {}

class _FakeChannelServiceClient_5 extends _i1.Fake
    implements _i7.ChannelServiceClient {}

class _FakeGetMembersRes_6 extends _i1.Fake implements _i6.GetMembersRes {}

class _FakeBehaviorSubject_7<T> extends _i1.Fake
    implements _i8.BehaviorSubject<T> {}

class _FakeResponseFuture_8<R> extends _i1.Fake
    implements _i9.ResponseFuture<R> {}

class _FakeClientCall_9<Q, R> extends _i1.Fake
    implements _i10.ClientCall<Q, R> {}

class _FakeResponseStream_10<R> extends _i1.Fake
    implements _i9.ResponseStream<R> {}

class _FakeLocale_11 extends _i1.Fake implements _i11.Locale {}

class _FakeAccount_12 extends _i1.Fake implements _i12.Account {}

class _FakeRole_13 extends _i1.Fake implements _i13.Role {}

class _FakeBotInfo_14 extends _i1.Fake implements _i14.BotInfo {}

class _FakeFetchMediasReq_MediaType_15 extends _i1.Fake
    implements _i15.FetchMediasReq_MediaType {}

/// A class which mocks [AnalyticsRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsRepo extends _i1.Mock implements _i16.AnalyticsRepo {
  @override
  Map<String, int> get requestsFrequency =>
      (super.noSuchMethod(Invocation.getter(#requestsFrequency),
          returnValue: <String, int>{}) as Map<String, int>);
  @override
  Map<String, int> get pageViewFrequency =>
      (super.noSuchMethod(Invocation.getter(#pageViewFrequency),
          returnValue: <String, int>{}) as Map<String, int>);
  @override
  Map<String, int> get daoFrequency =>
      (super.noSuchMethod(Invocation.getter(#daoFrequency),
          returnValue: <String, int>{}) as Map<String, int>);
  @override
  _i17.Stream<void> get events =>
      (super.noSuchMethod(Invocation.getter(#events),
          returnValue: Stream<void>.empty()) as _i17.Stream<void>);
  @override
  _i17.Stream<void> get daoEvents =>
      (super.noSuchMethod(Invocation.getter(#daoEvents),
          returnValue: Stream<void>.empty()) as _i17.Stream<void>);
  @override
  void incRF(String? key) =>
      super.noSuchMethod(Invocation.method(#incRF, [key]),
          returnValueForMissingStub: null);
  @override
  void incPVF(String? key) =>
      super.noSuchMethod(Invocation.method(#incPVF, [key]),
          returnValueForMissingStub: null);
  @override
  void incDao(String? key) =>
      super.noSuchMethod(Invocation.method(#incDao, [key]),
          returnValueForMissingStub: null);
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i18.Logger {
  @override
  void v(dynamic message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#v, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void d(dynamic message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#d, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void i(dynamic message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#i, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void w(dynamic message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#w, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void e(dynamic message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#e, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void wtf(dynamic message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#wtf, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void log(_i18.Level? level, dynamic message,
          [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
          Invocation.method(#log, [level, message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [MessageDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageDao extends _i1.Mock implements _i19.MessageDao {
  @override
  _i17.Future<void> saveMessage(_i20.Message? message) => (super.noSuchMethod(
      Invocation.method(#saveMessage, [message]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<void> deleteMessage(_i20.Message? message) => (super.noSuchMethod(
      Invocation.method(#deleteMessage, [message]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<_i20.Message?> getMessage(String? roomUid, int? id) =>
      (super.noSuchMethod(Invocation.method(#getMessage, [roomUid, id]),
              returnValue: Future<_i20.Message?>.value())
          as _i17.Future<_i20.Message?>);
  @override
  _i17.Future<List<_i20.Message>> getMessagePage(String? roomUid, int? page,
          {int? pageSize = 16}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getMessagePage, [roomUid, page], {#pageSize: pageSize}),
              returnValue: Future<List<_i20.Message>>.value(<_i20.Message>[]))
          as _i17.Future<List<_i20.Message>>);
  @override
  _i17.Future<List<_i21.PendingMessage>> getPendingMessages(String? roomUid) =>
      (super.noSuchMethod(Invocation.method(#getPendingMessages, [roomUid]),
              returnValue: Future<List<_i21.PendingMessage>>.value(
                  <_i21.PendingMessage>[]))
          as _i17.Future<List<_i21.PendingMessage>>);
  @override
  _i17.Stream<List<_i21.PendingMessage>> watchPendingMessages(
          String? roomUid) =>
      (super.noSuchMethod(Invocation.method(#watchPendingMessages, [roomUid]),
              returnValue: Stream<List<_i21.PendingMessage>>.empty())
          as _i17.Stream<List<_i21.PendingMessage>>);
  @override
  _i17.Future<_i21.PendingMessage?> getPendingMessage(String? packetId) =>
      (super.noSuchMethod(Invocation.method(#getPendingMessage, [packetId]),
              returnValue: Future<_i21.PendingMessage?>.value())
          as _i17.Future<_i21.PendingMessage?>);
  @override
  _i17.Stream<_i21.PendingMessage?> watchPendingMessage(String? packetId) =>
      (super.noSuchMethod(Invocation.method(#watchPendingMessage, [packetId]),
              returnValue: Stream<_i21.PendingMessage?>.empty())
          as _i17.Stream<_i21.PendingMessage?>);
  @override
  _i17.Future<List<_i21.PendingMessage>> getAllPendingMessages() =>
      (super.noSuchMethod(Invocation.method(#getAllPendingMessages, []),
              returnValue: Future<List<_i21.PendingMessage>>.value(
                  <_i21.PendingMessage>[]))
          as _i17.Future<List<_i21.PendingMessage>>);
  @override
  _i17.Future<void> deletePendingMessage(String? packetId) =>
      (super.noSuchMethod(Invocation.method(#deletePendingMessage, [packetId]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<void> savePendingMessage(_i21.PendingMessage? pm) =>
      (super.noSuchMethod(Invocation.method(#savePendingMessage, [pm]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
}

/// A class which mocks [RoomDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoomDao extends _i1.Mock implements _i22.RoomDao {
  @override
  _i17.Future<void> updateRoom(
          {String? uid,
          _i20.Message? lastMessage,
          int? lastMessageId,
          bool? deleted,
          String? draft,
          int? lastUpdateTime,
          int? firstMessageId,
          bool? mentioned,
          bool? pinned,
          int? hiddenMessageCount}) =>
      (super.noSuchMethod(
              Invocation.method(#updateRoom, [], {
                #uid: uid,
                #lastMessage: lastMessage,
                #lastMessageId: lastMessageId,
                #deleted: deleted,
                #draft: draft,
                #lastUpdateTime: lastUpdateTime,
                #firstMessageId: firstMessageId,
                #mentioned: mentioned,
                #pinned: pinned,
                #hiddenMessageCount: hiddenMessageCount
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<List<_i23.Room>> getAllRooms() =>
      (super.noSuchMethod(Invocation.method(#getAllRooms, []),
              returnValue: Future<List<_i23.Room>>.value(<_i23.Room>[]))
          as _i17.Future<List<_i23.Room>>);
  @override
  _i17.Stream<List<_i23.Room>> watchAllRooms() =>
      (super.noSuchMethod(Invocation.method(#watchAllRooms, []),
              returnValue: Stream<List<_i23.Room>>.empty())
          as _i17.Stream<List<_i23.Room>>);
  @override
  _i17.Future<_i23.Room?> getRoom(String? roomUid) =>
      (super.noSuchMethod(Invocation.method(#getRoom, [roomUid]),
          returnValue: Future<_i23.Room?>.value()) as _i17.Future<_i23.Room?>);
  @override
  _i17.Stream<_i23.Room> watchRoom(String? roomUid) =>
      (super.noSuchMethod(Invocation.method(#watchRoom, [roomUid]),
          returnValue: Stream<_i23.Room>.empty()) as _i17.Stream<_i23.Room>);
  @override
  _i17.Future<List<_i23.Room>> getAllGroups() =>
      (super.noSuchMethod(Invocation.method(#getAllGroups, []),
              returnValue: Future<List<_i23.Room>>.value(<_i23.Room>[]))
          as _i17.Future<List<_i23.Room>>);
}

/// A class which mocks [RoomRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoomRepo extends _i1.Mock implements _i24.RoomRepo {
  @override
  Map<String, _i8.BehaviorSubject<_i25.Activity>> get activityObject =>
      (super.noSuchMethod(Invocation.getter(#activityObject),
              returnValue: <String, _i8.BehaviorSubject<_i25.Activity>>{})
          as Map<String, _i8.BehaviorSubject<_i25.Activity>>);
  @override
  _i17.Future<String> getSlangName(_i3.Uid? uid, {String? unknownName}) =>
      (super.noSuchMethod(
          Invocation.method(#getSlangName, [uid], {#unknownName: unknownName}),
          returnValue: Future<String>.value('')) as _i17.Future<String>);
  @override
  _i17.Future<bool> isVerified(_i3.Uid? uid) =>
      (super.noSuchMethod(Invocation.method(#isVerified, [uid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  String? fastForwardName(_i3.Uid? uid) =>
      (super.noSuchMethod(Invocation.method(#fastForwardName, [uid]))
          as String?);
  @override
  _i17.Future<String> getName(_i3.Uid? uid, {String? unknownName}) =>
      (super.noSuchMethod(
          Invocation.method(#getName, [uid], {#unknownName: unknownName}),
          returnValue: Future<String>.value('')) as _i17.Future<String>);
  @override
  _i17.Future<String?>? getId(_i3.Uid? uid) =>
      (super.noSuchMethod(Invocation.method(#getId, [uid]))
          as _i17.Future<String?>?);
  @override
  _i17.Future<bool> deleteRoom(_i3.Uid? roomUid) =>
      (super.noSuchMethod(Invocation.method(#deleteRoom, [roomUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<String?> getIdByUid(_i3.Uid? uid) =>
      (super.noSuchMethod(Invocation.method(#getIdByUid, [uid]),
          returnValue: Future<String?>.value()) as _i17.Future<String?>);
  @override
  void updateActivity(_i25.Activity? activity) =>
      super.noSuchMethod(Invocation.method(#updateActivity, [activity]),
          returnValueForMissingStub: null);
  @override
  void initActivity(String? roomId) =>
      super.noSuchMethod(Invocation.method(#initActivity, [roomId]),
          returnValueForMissingStub: null);
  @override
  void updateRoomName(_i3.Uid? uid, String? name) =>
      super.noSuchMethod(Invocation.method(#updateRoomName, [uid, name]),
          returnValueForMissingStub: null);
  @override
  _i17.Future<bool> isRoomHaveACustomNotification(String? uid) => (super
      .noSuchMethod(Invocation.method(#isRoomHaveACustomNotification, [uid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<void> setRoomCustomNotification(String? uid, String? path) =>
      (super.noSuchMethod(
              Invocation.method(#setRoomCustomNotification, [uid, path]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<String?> getRoomCustomNotification(String? uid) =>
      (super.noSuchMethod(Invocation.method(#getRoomCustomNotification, [uid]),
          returnValue: Future<String?>.value()) as _i17.Future<String?>);
  @override
  _i17.Future<bool> isRoomMuted(String? uid) =>
      (super.noSuchMethod(Invocation.method(#isRoomMuted, [uid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Stream<bool> watchIsRoomMuted(String? uid) =>
      (super.noSuchMethod(Invocation.method(#watchIsRoomMuted, [uid]),
          returnValue: Stream<bool>.empty()) as _i17.Stream<bool>);
  @override
  void mute(String? uid) => super.noSuchMethod(Invocation.method(#mute, [uid]),
      returnValueForMissingStub: null);
  @override
  void unmute(String? uid) =>
      super.noSuchMethod(Invocation.method(#unmute, [uid]),
          returnValueForMissingStub: null);
  @override
  _i17.Future<bool> isRoomBlocked(String? uid) =>
      (super.noSuchMethod(Invocation.method(#isRoomBlocked, [uid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Stream<bool?> watchIsRoomBlocked(String? uid) =>
      (super.noSuchMethod(Invocation.method(#watchIsRoomBlocked, [uid]),
          returnValue: Stream<bool?>.empty()) as _i17.Stream<bool?>);
  @override
  _i17.Stream<List<_i23.Room>> watchAllRooms() =>
      (super.noSuchMethod(Invocation.method(#watchAllRooms, []),
              returnValue: Stream<List<_i23.Room>>.empty())
          as _i17.Stream<List<_i23.Room>>);
  @override
  _i17.Stream<_i23.Room> watchRoom(String? roomUid) =>
      (super.noSuchMethod(Invocation.method(#watchRoom, [roomUid]),
          returnValue: Stream<_i23.Room>.empty()) as _i17.Stream<_i23.Room>);
  @override
  _i17.Future<_i23.Room?> getRoom(String? roomUid) =>
      (super.noSuchMethod(Invocation.method(#getRoom, [roomUid]),
          returnValue: Future<_i23.Room?>.value()) as _i17.Future<_i23.Room?>);
  @override
  _i17.Future<void> resetMention(String? roomUid) => (super.noSuchMethod(
      Invocation.method(#resetMention, [roomUid]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<void> createRoomIfNotExist(String? roomUid) =>
      (super.noSuchMethod(Invocation.method(#createRoomIfNotExist, [roomUid]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Stream<_i2.Seen> watchMySeen(String? roomUid) =>
      (super.noSuchMethod(Invocation.method(#watchMySeen, [roomUid]),
          returnValue: Stream<_i2.Seen>.empty()) as _i17.Stream<_i2.Seen>);
  @override
  _i17.Future<_i2.Seen> getMySeen(String? roomUid) =>
      (super.noSuchMethod(Invocation.method(#getMySeen, [roomUid]),
              returnValue: Future<_i2.Seen>.value(_FakeSeen_0()))
          as _i17.Future<_i2.Seen>);
  @override
  _i17.Future<_i2.Seen?> getOthersSeen(String? roomUid) =>
      (super.noSuchMethod(Invocation.method(#getOthersSeen, [roomUid]),
          returnValue: Future<_i2.Seen?>.value()) as _i17.Future<_i2.Seen?>);
  @override
  _i17.Future<void> updateMySeen(
          {String? uid, int? messageId, int? hiddenMessageCount}) =>
      (super.noSuchMethod(
              Invocation.method(#updateMySeen, [], {
                #uid: uid,
                #messageId: messageId,
                #hiddenMessageCount: hiddenMessageCount
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<void> block(String? uid, {bool? block}) => (super.noSuchMethod(
      Invocation.method(#block, [uid], {#block: block}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<void> fetchBlockedRoom() => (super.noSuchMethod(
      Invocation.method(#fetchBlockedRoom, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<List<_i3.Uid>> getAllRooms() =>
      (super.noSuchMethod(Invocation.method(#getAllRooms, []),
              returnValue: Future<List<_i3.Uid>>.value(<_i3.Uid>[]))
          as _i17.Future<List<_i3.Uid>>);
  @override
  _i17.Future<List<_i3.Uid>> searchInRoomAndContacts(String? text) =>
      (super.noSuchMethod(Invocation.method(#searchInRoomAndContacts, [text]),
              returnValue: Future<List<_i3.Uid>>.value(<_i3.Uid>[]))
          as _i17.Future<List<_i3.Uid>>);
  @override
  _i17.Future<String> getUidById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getUidById, [id]),
          returnValue: Future<String>.value('')) as _i17.Future<String>);
  @override
  _i17.Future<_i3.Uid> fetchUidById(String? username) =>
      (super.noSuchMethod(Invocation.method(#fetchUidById, [username]),
              returnValue: Future<_i3.Uid>.value(_FakeUid_1()))
          as _i17.Future<_i3.Uid>);
  @override
  _i17.Future<void> reportRoom(_i3.Uid? roomUid) => (super.noSuchMethod(
      Invocation.method(#reportRoom, [roomUid]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<List<_i23.Room>> getAllGroups() =>
      (super.noSuchMethod(Invocation.method(#getAllGroups, []),
              returnValue: Future<List<_i23.Room>>.value(<_i23.Room>[]))
          as _i17.Future<List<_i23.Room>>);
  @override
  void updateRoomDraft(String? roomUid, String? draft) =>
      super.noSuchMethod(Invocation.method(#updateRoomDraft, [roomUid, draft]),
          returnValueForMissingStub: null);
  @override
  _i17.Future<bool> isDeletedRoom(String? roomUid) =>
      (super.noSuchMethod(Invocation.method(#isDeletedRoom, [roomUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
}

/// A class which mocks [AuthRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepo extends _i1.Mock implements _i26.AuthRepo {
  @override
  _i3.Uid get currentUserUid =>
      (super.noSuchMethod(Invocation.getter(#currentUserUid),
          returnValue: _FakeUid_1()) as _i3.Uid);
  @override
  set currentUserUid(_i3.Uid? _currentUserUid) =>
      super.noSuchMethod(Invocation.setter(#currentUserUid, _currentUserUid),
          returnValueForMissingStub: null);
  @override
  set avatar(_i27.Avatar? _avatar) =>
      super.noSuchMethod(Invocation.setter(#avatar, _avatar),
          returnValueForMissingStub: null);
  @override
  _i17.Future<bool> isTestUser() =>
      (super.noSuchMethod(Invocation.method(#isTestUser, []),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<void> setCurrentUserUid() => (super.noSuchMethod(
      Invocation.method(#setCurrentUserUid, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<void> getVerificationCode(_i28.PhoneNumber? p) =>
      (super.noSuchMethod(Invocation.method(#getVerificationCode, [p]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<_i4.AccessTokenRes> sendVerificationCode(String? code,
          {String? password}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #sendVerificationCode, [code], {#password: password}),
              returnValue:
                  Future<_i4.AccessTokenRes>.value(_FakeAccessTokenRes_2()))
          as _i17.Future<_i4.AccessTokenRes>);
  @override
  _i17.Future<_i4.AccessTokenRes> checkQrCodeToken(String? token,
          {String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#checkQrCodeToken, [token], {#password: password}),
          returnValue:
              Future<_i4.AccessTokenRes>.value(_FakeAccessTokenRes_2())) as _i17
          .Future<_i4.AccessTokenRes>);
  @override
  _i17.Future<String> getAccessToken() =>
      (super.noSuchMethod(Invocation.method(#getAccessToken, []),
          returnValue: Future<String>.value('')) as _i17.Future<String>);
  @override
  bool isLocalLockEnabled() =>
      (super.noSuchMethod(Invocation.method(#isLocalLockEnabled, []),
          returnValue: false) as bool);
  @override
  bool localPasswordIsCorrect(String? pass) =>
      (super.noSuchMethod(Invocation.method(#localPasswordIsCorrect, [pass]),
          returnValue: false) as bool);
  @override
  String getLocalPassword() =>
      (super.noSuchMethod(Invocation.method(#getLocalPassword, []),
          returnValue: '') as String);
  @override
  void setLocalPassword(String? pass) =>
      super.noSuchMethod(Invocation.method(#setLocalPassword, [pass]),
          returnValueForMissingStub: null);
  @override
  bool isLoggedIn() => (super.noSuchMethod(Invocation.method(#isLoggedIn, []),
      returnValue: false) as bool);
  @override
  bool isCurrentUser(String? uid) =>
      (super.noSuchMethod(Invocation.method(#isCurrentUser, [uid]),
          returnValue: false) as bool);
  @override
  bool isCurrentUserUid(_i3.Uid? uid) =>
      (super.noSuchMethod(Invocation.method(#isCurrentUserUid, [uid]),
          returnValue: false) as bool);
  @override
  bool isCurrentUserSender(_i20.Message? msg) =>
      (super.noSuchMethod(Invocation.method(#isCurrentUserSender, [msg]),
          returnValue: false) as bool);
  @override
  bool isCurrentSession(_i29.Session? session) =>
      (super.noSuchMethod(Invocation.method(#isCurrentSession, [session]),
          returnValue: false) as bool);
  @override
  _i17.Future<void> deleteTokens() => (super.noSuchMethod(
      Invocation.method(#deleteTokens, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  void saveTestUserInfo() =>
      super.noSuchMethod(Invocation.method(#saveTestUserInfo, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [FireBaseServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockFireBaseServices extends _i1.Mock implements _i30.FireBaseServices {
  @override
  _i17.Future<void> sendFireBaseToken() => (super.noSuchMethod(
      Invocation.method(#sendFireBaseToken, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  void deleteToken() => super.noSuchMethod(Invocation.method(#deleteToken, []),
      returnValueForMissingStub: null);
  @override
  _i17.Future<void> sendGlitchReportForFirebaseNotification(String? roomUid) =>
      (super.noSuchMethod(
              Invocation.method(
                  #sendGlitchReportForFirebaseNotification, [roomUid]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
}

/// A class which mocks [FileRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileRepo extends _i1.Mock implements _i31.FileRepo {
  @override
  Map<String, _i8.BehaviorSubject<int?>> get uploadFileStatusCode =>
      (super.noSuchMethod(Invocation.getter(#uploadFileStatusCode),
              returnValue: <String, _i8.BehaviorSubject<int?>>{})
          as Map<String, _i8.BehaviorSubject<int?>>);
  @override
  set uploadFileStatusCode(
          Map<String, _i8.BehaviorSubject<int?>>? _uploadFileStatusCode) =>
      super.noSuchMethod(
          Invocation.setter(#uploadFileStatusCode, _uploadFileStatusCode),
          returnValueForMissingStub: null);
  @override
  _i17.Future<void> cloneFileInLocalDirectory(
          _i32.File? file, String? uploadKey, String? name) =>
      (super.noSuchMethod(
              Invocation.method(
                  #cloneFileInLocalDirectory, [file, uploadKey, name]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<_i33.File?> uploadClonedFile(String? uploadKey, String? name,
          {void Function(int)? sendActivity}) =>
      (super.noSuchMethod(
          Invocation.method(#uploadClonedFile, [uploadKey, name],
              {#sendActivity: sendActivity}),
          returnValue: Future<_i33.File?>.value()) as _i17.Future<_i33.File?>);
  @override
  _i17.Future<bool> isExist(String? uuid, String? filename,
          {_i34.ThumbnailSize? thumbnailSize}) =>
      (super.noSuchMethod(
          Invocation.method(
              #isExist, [uuid, filename], {#thumbnailSize: thumbnailSize}),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<void> saveDownloadedFile(String? url, String? filename) => (super
          .noSuchMethod(Invocation.method(#saveDownloadedFile, [url, filename]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
      as _i17.Future<void>);
  @override
  _i17.Future<String?> getFileIfExist(String? uuid, String? filename,
          {_i34.ThumbnailSize? thumbnailSize}) =>
      (super.noSuchMethod(
          Invocation.method(#getFileIfExist, [uuid, filename],
              {#thumbnailSize: thumbnailSize}),
          returnValue: Future<String?>.value()) as _i17.Future<String?>);
  @override
  _i17.Future<String?> getFile(String? uuid, String? filename,
          {_i34.ThumbnailSize? thumbnailSize, bool? intiProgressBar = true}) =>
      (super.noSuchMethod(
          Invocation.method(#getFile, [
            uuid,
            filename
          ], {
            #thumbnailSize: thumbnailSize,
            #intiProgressBar: intiProgressBar
          }),
          returnValue: Future<String?>.value()) as _i17.Future<String?>);
  @override
  void initUploadProgress(String? uploadId) =>
      super.noSuchMethod(Invocation.method(#initUploadProgress, [uploadId]),
          returnValueForMissingStub: null);
  @override
  void saveFileInDownloadDir(String? uuid, String? name, String? dir) =>
      super.noSuchMethod(
          Invocation.method(#saveFileInDownloadDir, [uuid, name, dir]),
          returnValueForMissingStub: null);
}

/// A class which mocks [LiveLocationRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockLiveLocationRepo extends _i1.Mock implements _i35.LiveLocationRepo {
  @override
  void saveLiveLocation(_i36.LiveLocation? liveLocation) =>
      super.noSuchMethod(Invocation.method(#saveLiveLocation, [liveLocation]),
          returnValueForMissingStub: null);
  @override
  _i17.Future<_i36.LiveLocation?> getLiveLocation(String? uuid) =>
      (super.noSuchMethod(Invocation.method(#getLiveLocation, [uuid]),
              returnValue: Future<_i36.LiveLocation?>.value())
          as _i17.Future<_i36.LiveLocation?>);
  @override
  _i17.Stream<_i36.LiveLocation?> watchLiveLocation(String? uuid) =>
      (super.noSuchMethod(Invocation.method(#watchLiveLocation, [uuid]),
              returnValue: Stream<_i36.LiveLocation?>.empty())
          as _i17.Stream<_i36.LiveLocation?>);
  @override
  void updateLiveLocation(_i37.LiveLocation? liveLocation) =>
      super.noSuchMethod(Invocation.method(#updateLiveLocation, [liveLocation]),
          returnValueForMissingStub: null);
  @override
  _i17.Future<_i5.CreateLiveLocationRes> createLiveLocation(
          _i3.Uid? roomUid, int? duration) =>
      (super.noSuchMethod(
              Invocation.method(#createLiveLocation, [roomUid, duration]),
              returnValue: Future<_i5.CreateLiveLocationRes>.value(
                  _FakeCreateLiveLocationRes_3()))
          as _i17.Future<_i5.CreateLiveLocationRes>);
  @override
  void sendLiveLocationAsStream(
          String? uuid, int? duration, _i37.Location? location) =>
      super.noSuchMethod(
          Invocation.method(
              #sendLiveLocationAsStream, [uuid, duration, location]),
          returnValueForMissingStub: null);
}

/// A class which mocks [SeenDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockSeenDao extends _i1.Mock implements _i38.SeenDao {
  @override
  _i17.Future<_i2.Seen?> getOthersSeen(String? uid) =>
      (super.noSuchMethod(Invocation.method(#getOthersSeen, [uid]),
          returnValue: Future<_i2.Seen?>.value()) as _i17.Future<_i2.Seen?>);
  @override
  _i17.Stream<_i2.Seen?> watchOthersSeen(String? uid) =>
      (super.noSuchMethod(Invocation.method(#watchOthersSeen, [uid]),
          returnValue: Stream<_i2.Seen?>.empty()) as _i17.Stream<_i2.Seen?>);
  @override
  _i17.Future<_i2.Seen> getMySeen(String? uid) =>
      (super.noSuchMethod(Invocation.method(#getMySeen, [uid]),
              returnValue: Future<_i2.Seen>.value(_FakeSeen_0()))
          as _i17.Future<_i2.Seen>);
  @override
  _i17.Stream<_i2.Seen> watchMySeen(String? uid) =>
      (super.noSuchMethod(Invocation.method(#watchMySeen, [uid]),
          returnValue: Stream<_i2.Seen>.empty()) as _i17.Stream<_i2.Seen>);
  @override
  _i17.Future<void> saveOthersSeen(_i2.Seen? seen) => (super.noSuchMethod(
      Invocation.method(#saveOthersSeen, [seen]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<void> updateMySeen(
          {String? uid, int? messageId, int? hiddenMessageCount}) =>
      (super.noSuchMethod(
              Invocation.method(#updateMySeen, [], {
                #uid: uid,
                #messageId: messageId,
                #hiddenMessageCount: hiddenMessageCount
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
}

/// A class which mocks [MucServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockMucServices extends _i1.Mock implements _i39.MucServices {
  @override
  _i6.GroupServiceClient get groupServices =>
      (super.noSuchMethod(Invocation.getter(#groupServices),
          returnValue: _FakeGroupServiceClient_4()) as _i6.GroupServiceClient);
  @override
  _i7.ChannelServiceClient get channelServices => (super.noSuchMethod(
      Invocation.getter(#channelServices),
      returnValue: _FakeChannelServiceClient_5()) as _i7.ChannelServiceClient);
  @override
  _i17.Future<_i3.Uid?> createNewGroup(String? groupName, String? info) =>
      (super.noSuchMethod(Invocation.method(#createNewGroup, [groupName, info]),
          returnValue: Future<_i3.Uid?>.value()) as _i17.Future<_i3.Uid?>);
  @override
  _i17.Future<bool> addGroupMembers(
          List<_i13.Member>? members, _i3.Uid? groupUid,
          {bool? retry = false}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addGroupMembers, [members, groupUid], {#retry: retry}),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<_i6.GetGroupRes?> getGroup(_i3.Uid? groupUid) =>
      (super.noSuchMethod(Invocation.method(#getGroup, [groupUid]),
              returnValue: Future<_i6.GetGroupRes?>.value())
          as _i17.Future<_i6.GetGroupRes?>);
  @override
  _i17.Future<bool> removeGroup(_i3.Uid? groupUid) =>
      (super.noSuchMethod(Invocation.method(#removeGroup, [groupUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> changeGroupRole(_i13.Member? member, _i3.Uid? group) =>
      (super.noSuchMethod(Invocation.method(#changeGroupRole, [member, group]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<_i6.GetMembersRes> getGroupMembers(
          _i3.Uid? groupUid, int? limit, int? pointer) =>
      (super.noSuchMethod(
              Invocation.method(#getGroupMembers, [groupUid, limit, pointer]),
              returnValue:
                  Future<_i6.GetMembersRes>.value(_FakeGetMembersRes_6()))
          as _i17.Future<_i6.GetMembersRes>);
  @override
  _i17.Future<bool> leaveGroup(_i3.Uid? groupUid) =>
      (super.noSuchMethod(Invocation.method(#leaveGroup, [groupUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> kickGroupMembers(
          List<_i13.Member>? members, _i3.Uid? groupUid) =>
      (super.noSuchMethod(
          Invocation.method(#kickGroupMembers, [members, groupUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> banGroupMember(_i13.Member? member, _i3.Uid? mucUid) =>
      (super.noSuchMethod(Invocation.method(#banGroupMember, [member, mucUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> unbanGroupMember(_i13.Member? member, _i3.Uid? mucUid) =>
      (super.noSuchMethod(
          Invocation.method(#unbanGroupMember, [member, mucUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> joinGroup(_i3.Uid? groupUid, String? token) =>
      (super.noSuchMethod(Invocation.method(#joinGroup, [groupUid, token]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> modifyGroup(_i6.GroupInfo? group, _i3.Uid? mucUid) =>
      (super.noSuchMethod(Invocation.method(#modifyGroup, [group, mucUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<_i3.Uid?> createNewChannel(String? channelName,
          _i7.ChannelType? type, String? channelId, String? info,
          {bool? retry = true}) =>
      (super.noSuchMethod(
          Invocation.method(#createNewChannel,
              [channelName, type, channelId, info], {#retry: retry}),
          returnValue: Future<_i3.Uid?>.value()) as _i17.Future<_i3.Uid?>);
  @override
  _i17.Future<bool> addChannelMembers(
          List<_i13.Member>? members, _i3.Uid? mucUid) =>
      (super.noSuchMethod(
          Invocation.method(#addChannelMembers, [members, mucUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<_i7.GetChannelRes?> getChannel(_i3.Uid? channelUid) =>
      (super.noSuchMethod(Invocation.method(#getChannel, [channelUid]),
              returnValue: Future<_i7.GetChannelRes?>.value())
          as _i17.Future<_i7.GetChannelRes?>);
  @override
  _i17.Future<bool> removeChannel(_i3.Uid? channelUid) =>
      (super.noSuchMethod(Invocation.method(#removeChannel, [channelUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> changeCahnnelRole(_i13.Member? member, _i3.Uid? channel) =>
      (super.noSuchMethod(
          Invocation.method(#changeCahnnelRole, [member, channel]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<_i7.GetMembersRes?> getChannelMembers(
          _i3.Uid? channelUid, int? limit, int? pointer) =>
      (super.noSuchMethod(
          Invocation.method(#getChannelMembers, [channelUid, limit, pointer]),
          returnValue:
              Future<_i7.GetMembersRes?>.value()) as _i17
          .Future<_i7.GetMembersRes?>);
  @override
  _i17.Future<bool> leaveChannel(_i3.Uid? channelUid) =>
      (super.noSuchMethod(Invocation.method(#leaveChannel, [channelUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> kickChannelMembers(
          List<_i13.Member>? members, _i3.Uid? channelUid) =>
      (super.noSuchMethod(
          Invocation.method(#kickChannelMembers, [members, channelUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> banChannelMember(
          _i13.Member? member, _i3.Uid? channelUid) =>
      (super.noSuchMethod(
          Invocation.method(#banChannelMember, [member, channelUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> unbanChannelMember(
          _i13.Member? member, _i3.Uid? channelUid) =>
      (super.noSuchMethod(
          Invocation.method(#unbanChannelMember, [member, channelUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> joinChannel(_i3.Uid? channelUid, String? token) =>
      (super.noSuchMethod(Invocation.method(#joinChannel, [channelUid, token]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> modifyChannel(
          _i7.ChannelInfo? channelInfo, _i3.Uid? mucUid) =>
      (super.noSuchMethod(
          Invocation.method(#modifyChannel, [channelInfo, mucUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<void> pinMessage(_i20.Message? message) => (super.noSuchMethod(
      Invocation.method(#pinMessage, [message]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<String?> getGroupJointToken({_i3.Uid? groupUid}) =>
      (super.noSuchMethod(
          Invocation.method(#getGroupJointToken, [], {#groupUid: groupUid}),
          returnValue: Future<String?>.value()) as _i17.Future<String?>);
  @override
  _i17.Future<String?> getChannelJointToken({_i3.Uid? channelUid}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getChannelJointToken, [], {#channelUid: channelUid}),
          returnValue: Future<String?>.value()) as _i17.Future<String?>);
  @override
  _i17.Future<void> unpinMessage(_i20.Message? message) => (super.noSuchMethod(
      Invocation.method(#unpinMessage, [message]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
}

/// A class which mocks [DataStreamServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataStreamServices extends _i1.Mock
    implements _i40.DataStreamServices {
  @override
  _i17.Future<_i20.Message?> handleIncomingMessage(_i41.Message? message,
          {String? roomName,
          bool? isOnlineMessage,
          bool? saveInDatabase = true}) =>
      (super.noSuchMethod(
              Invocation.method(#handleIncomingMessage, [
                message
              ], {
                #roomName: roomName,
                #isOnlineMessage: isOnlineMessage,
                #saveInDatabase: saveInDatabase
              }),
              returnValue: Future<_i20.Message?>.value())
          as _i17.Future<_i20.Message?>);
  @override
  _i17.Future<void> handleSeen(_i42.Seen? seen) => (super.noSuchMethod(
      Invocation.method(#handleSeen, [seen]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  void handleActivity(_i25.Activity? activity) =>
      super.noSuchMethod(Invocation.method(#handleActivity, [activity]),
          returnValueForMissingStub: null);
  @override
  _i17.Future<void> handleAckMessage(
          _i41.MessageDeliveryAck? messageDeliveryAck) =>
      (super.noSuchMethod(
              Invocation.method(#handleAckMessage, [messageDeliveryAck]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  void handleRoomPresenceTypeChange(
          _i43.RoomPresenceTypeChanged? roomPresenceTypeChanged) =>
      super.noSuchMethod(
          Invocation.method(
              #handleRoomPresenceTypeChange, [roomPresenceTypeChanged]),
          returnValueForMissingStub: null);
  @override
  void handleCallOffer(_i44.CallOffer? callOffer) =>
      super.noSuchMethod(Invocation.method(#handleCallOffer, [callOffer]),
          returnValueForMissingStub: null);
  @override
  void handleCallAnswer(_i44.CallAnswer? callAnswer) =>
      super.noSuchMethod(Invocation.method(#handleCallAnswer, [callAnswer]),
          returnValueForMissingStub: null);
  @override
  _i17.Future<bool> shouldNotifyForThisMessage(_i41.Message? message) => (super
      .noSuchMethod(Invocation.method(#shouldNotifyForThisMessage, [message]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<_i20.Message?> saveMessageInMessagesDB(_i41.Message? message) =>
      (super.noSuchMethod(
              Invocation.method(#saveMessageInMessagesDB, [message]),
              returnValue: Future<_i20.Message?>.value())
          as _i17.Future<_i20.Message?>);
  @override
  _i17.Future<_i20.Message?> fetchLastNotHiddenMessage(
          _i3.Uid? roomUid, int? lastMessageId, int? firstMessageId,
          {bool? retry = true}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchLastNotHiddenMessage,
                  [roomUid, lastMessageId, firstMessageId], {#retry: retry}),
              returnValue: Future<_i20.Message?>.value())
          as _i17.Future<_i20.Message?>);
  @override
  _i17.Future<List<_i20.Message>> saveFetchMessages(
          List<_i41.Message>? messages) =>
      (super.noSuchMethod(Invocation.method(#saveFetchMessages, [messages]),
              returnValue: Future<List<_i20.Message>>.value(<_i20.Message>[]))
          as _i17.Future<List<_i20.Message>>);
}

/// A class which mocks [CoreServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoreServices extends _i1.Mock implements _i45.CoreServices {
  @override
  bool get responseChecked => (super
          .noSuchMethod(Invocation.getter(#responseChecked), returnValue: false)
      as bool);
  @override
  set responseChecked(bool? _responseChecked) =>
      super.noSuchMethod(Invocation.setter(#responseChecked, _responseChecked),
          returnValueForMissingStub: null);
  @override
  int get backoffTime =>
      (super.noSuchMethod(Invocation.getter(#backoffTime), returnValue: 0)
          as int);
  @override
  set backoffTime(int? _backoffTime) =>
      super.noSuchMethod(Invocation.setter(#backoffTime, _backoffTime),
          returnValueForMissingStub: null);
  @override
  _i8.BehaviorSubject<_i45.ConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(Invocation.getter(#connectionStatus),
              returnValue: _FakeBehaviorSubject_7<_i45.ConnectionStatus>())
          as _i8.BehaviorSubject<_i45.ConnectionStatus>);
  @override
  set connectionStatus(
          _i8.BehaviorSubject<_i45.ConnectionStatus>? _connectionStatus) =>
      super.noSuchMethod(
          Invocation.setter(#connectionStatus, _connectionStatus),
          returnValueForMissingStub: null);
  @override
  _i17.Future<void> initStreamConnection() => (super.noSuchMethod(
      Invocation.method(#initStreamConnection, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  void closeConnection() =>
      super.noSuchMethod(Invocation.method(#closeConnection, []),
          returnValueForMissingStub: null);
  @override
  _i17.Future<void> startCheckerTimer() => (super.noSuchMethod(
      Invocation.method(#startCheckerTimer, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  void gotResponse() => super.noSuchMethod(Invocation.method(#gotResponse, []),
      returnValueForMissingStub: null);
  @override
  _i17.Future<void> startStream() => (super.noSuchMethod(
      Invocation.method(#startStream, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<void> sendMessage(_i41.MessageByClient? message) =>
      (super.noSuchMethod(Invocation.method(#sendMessage, [message]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  void sendPing() => super.noSuchMethod(Invocation.method(#sendPing, []),
      returnValueForMissingStub: null);
  @override
  void sendSeen(_i42.SeenByClient? seen) =>
      super.noSuchMethod(Invocation.method(#sendSeen, [seen]),
          returnValueForMissingStub: null);
  @override
  void sendCallAnswer(_i44.CallAnswerByClient? callAnswerByClient) => super
      .noSuchMethod(Invocation.method(#sendCallAnswer, [callAnswerByClient]),
          returnValueForMissingStub: null);
  @override
  void sendCallOffer(_i44.CallOfferByClient? callOfferByClient) =>
      super.noSuchMethod(Invocation.method(#sendCallOffer, [callOfferByClient]),
          returnValueForMissingStub: null);
  @override
  void sendActivity(_i25.ActivityByClient? activity, String? id) =>
      super.noSuchMethod(Invocation.method(#sendActivity, [activity, id]),
          returnValueForMissingStub: null);
}

/// A class which mocks [QueryServiceClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryServiceClient extends _i1.Mock
    implements _i15.QueryServiceClient {
  @override
  _i9.ResponseFuture<_i15.IdIsAvailableRes> idIsAvailable(
          _i15.IdIsAvailableReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#idIsAvailable, [request], {#options: options}),
              returnValue: _FakeResponseFuture_8<_i15.IdIsAvailableRes>())
          as _i9.ResponseFuture<_i15.IdIsAvailableRes>);
  @override
  _i9.ResponseFuture<_i15.SetIdRes> setId(_i15.SetIdReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#setId, [request], {#options: options}),
              returnValue: _FakeResponseFuture_8<_i15.SetIdRes>())
          as _i9.ResponseFuture<_i15.SetIdRes>);
  @override
  _i9.ResponseFuture<_i15.BlockRes> block(_i15.BlockReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#block, [request], {#options: options}),
              returnValue: _FakeResponseFuture_8<_i15.BlockRes>())
          as _i9.ResponseFuture<_i15.BlockRes>);
  @override
  _i9.ResponseFuture<_i15.UnblockRes> unblock(_i15.UnblockReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#unblock, [request], {#options: options}),
              returnValue: _FakeResponseFuture_8<_i15.UnblockRes>())
          as _i9.ResponseFuture<_i15.UnblockRes>);
  @override
  _i9.ResponseFuture<_i15.ReportRes> report(_i15.ReportReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#report, [request], {#options: options}),
              returnValue: _FakeResponseFuture_8<_i15.ReportRes>())
          as _i9.ResponseFuture<_i15.ReportRes>);
  @override
  _i9.ResponseFuture<_i15.GetBlockedListRes> getBlockedList(
          _i15.GetBlockedListReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
          Invocation.method(#getBlockedList, [request], {#options: options}),
          returnValue:
              _FakeResponseFuture_8<_i15.GetBlockedListRes>()) as _i9
          .ResponseFuture<_i15.GetBlockedListRes>);
  @override
  _i9.ResponseFuture<_i15.GetIdByUidRes> getIdByUid(_i15.GetIdByUidReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#getIdByUid, [request], {#options: options}),
              returnValue: _FakeResponseFuture_8<_i15.GetIdByUidRes>())
          as _i9.ResponseFuture<_i15.GetIdByUidRes>);
  @override
  _i9.ResponseFuture<_i15.GetUidByIdRes> getUidById(_i15.GetUidByIdReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#getUidById, [request], {#options: options}),
              returnValue: _FakeResponseFuture_8<_i15.GetUidByIdRes>())
          as _i9.ResponseFuture<_i15.GetUidByIdRes>);
  @override
  _i9.ResponseFuture<_i15.SearchUidRes> searchUid(_i15.SearchUidReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#searchUid, [request], {#options: options}),
              returnValue: _FakeResponseFuture_8<_i15.SearchUidRes>())
          as _i9.ResponseFuture<_i15.SearchUidRes>);
  @override
  _i9.ResponseFuture<_i15.GetLastActivityRes> getLastActivity(
          _i15.GetLastActivityReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
          Invocation.method(#getLastActivity, [request], {#options: options}),
          returnValue:
              _FakeResponseFuture_8<_i15.GetLastActivityRes>()) as _i9
          .ResponseFuture<_i15.GetLastActivityRes>);
  @override
  _i9.ResponseFuture<_i15.FetchMessagesRes> fetchMessages(
          _i15.FetchMessagesReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchMessages, [request], {#options: options}),
              returnValue: _FakeResponseFuture_8<_i15.FetchMessagesRes>())
          as _i9.ResponseFuture<_i15.FetchMessagesRes>);
  @override
  _i9.ResponseFuture<_i15.CountIsHiddenMessagesRes> countIsHiddenMessages(
          _i15.CountIsHiddenMessagesReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #countIsHiddenMessages, [request], {#options: options}),
              returnValue:
                  _FakeResponseFuture_8<_i15.CountIsHiddenMessagesRes>())
          as _i9.ResponseFuture<_i15.CountIsHiddenMessagesRes>);
  @override
  _i9.ResponseFuture<_i15.GetAllUserRoomMetaRes> getAllUserRoomMeta(
          _i15.GetAllUserRoomMetaReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getAllUserRoomMeta, [request], {#options: options}),
              returnValue: _FakeResponseFuture_8<_i15.GetAllUserRoomMetaRes>())
          as _i9.ResponseFuture<_i15.GetAllUserRoomMetaRes>);
  @override
  _i9.ResponseFuture<_i15.GetUserRoomMetaRes> getUserRoomMeta(
          _i15.GetUserRoomMetaReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
          Invocation.method(#getUserRoomMeta, [request], {#options: options}),
          returnValue:
              _FakeResponseFuture_8<_i15.GetUserRoomMetaRes>()) as _i9
          .ResponseFuture<_i15.GetUserRoomMetaRes>);
  @override
  _i9.ResponseFuture<_i15.GetMediaMetadataRes> getMediaMetadata(
          _i15.GetMediaMetadataReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
          Invocation.method(#getMediaMetadata, [request], {#options: options}),
          returnValue:
              _FakeResponseFuture_8<_i15.GetMediaMetadataRes>()) as _i9
          .ResponseFuture<_i15.GetMediaMetadataRes>);
  @override
  _i9.ResponseFuture<_i15.FetchMediasRes> fetchMedias(
          _i15.FetchMediasReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchMedias, [request], {#options: options}),
              returnValue: _FakeResponseFuture_8<_i15.FetchMediasRes>())
          as _i9.ResponseFuture<_i15.FetchMediasRes>);
  @override
  _i9.ResponseFuture<_i15.FetchMentionListRes> fetchMentionList(
          _i15.FetchMentionListReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
          Invocation.method(#fetchMentionList, [request], {#options: options}),
          returnValue:
              _FakeResponseFuture_8<_i15.FetchMentionListRes>()) as _i9
          .ResponseFuture<_i15.FetchMentionListRes>);
  @override
  _i9.ResponseFuture<_i15.FetchCurrentUserSeenDataRes> fetchCurrentUserSeenData(
          _i15.FetchCurrentUserSeenDataReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #fetchCurrentUserSeenData, [request], {#options: options}),
              returnValue:
                  _FakeResponseFuture_8<_i15.FetchCurrentUserSeenDataRes>())
          as _i9.ResponseFuture<_i15.FetchCurrentUserSeenDataRes>);
  @override
  _i9.ResponseFuture<
      _i15.FetchLastOtherUserSeenDataRes> fetchLastOtherUserSeenData(
          _i15.FetchLastOtherUserSeenDataReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #fetchLastOtherUserSeenData, [request], {#options: options}),
              returnValue:
                  _FakeResponseFuture_8<_i15.FetchLastOtherUserSeenDataRes>())
          as _i9.ResponseFuture<_i15.FetchLastOtherUserSeenDataRes>);
  @override
  _i9.ResponseFuture<_i15.FetchSeenCountOfChannelMessageRes>
      fetchSeenCountOfChannelMessage(
              _i15.FetchSeenCountOfChannelMessageReq? request,
              {_i9.CallOptions? options}) =>
          (super.noSuchMethod(
                  Invocation.method(#fetchSeenCountOfChannelMessage, [request],
                      {#options: options}),
                  returnValue: _FakeResponseFuture_8<
                      _i15.FetchSeenCountOfChannelMessageRes>())
              as _i9.ResponseFuture<_i15.FetchSeenCountOfChannelMessageRes>);
  @override
  _i9.ResponseFuture<_i15.FetchUserCallsRes> fetchUserCalls(
          _i15.FetchUserCallsReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
          Invocation.method(#fetchUserCalls, [request], {#options: options}),
          returnValue:
              _FakeResponseFuture_8<_i15.FetchUserCallsRes>()) as _i9
          .ResponseFuture<_i15.FetchUserCallsRes>);
  @override
  _i9.ResponseFuture<_i15.UpdateMessageRes> updateMessage(
          _i15.UpdateMessageReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#updateMessage, [request], {#options: options}),
              returnValue: _FakeResponseFuture_8<_i15.UpdateMessageRes>())
          as _i9.ResponseFuture<_i15.UpdateMessageRes>);
  @override
  _i9.ResponseFuture<_i15.DeleteMessageRes> deleteMessage(
          _i15.DeleteMessageReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteMessage, [request], {#options: options}),
              returnValue: _FakeResponseFuture_8<_i15.DeleteMessageRes>())
          as _i9.ResponseFuture<_i15.DeleteMessageRes>);
  @override
  _i9.ResponseFuture<_i15.AddAvatarRes> addAvatar(_i15.AddAvatarReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#addAvatar, [request], {#options: options}),
              returnValue: _FakeResponseFuture_8<_i15.AddAvatarRes>())
          as _i9.ResponseFuture<_i15.AddAvatarRes>);
  @override
  _i9.ResponseFuture<_i15.RemoveAvatarRes> removeAvatar(
          _i15.RemoveAvatarReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#removeAvatar, [request], {#options: options}),
              returnValue: _FakeResponseFuture_8<_i15.RemoveAvatarRes>())
          as _i9.ResponseFuture<_i15.RemoveAvatarRes>);
  @override
  _i9.ResponseFuture<_i15.RemovePrivateRoomRes> removePrivateRoom(
          _i15.RemovePrivateRoomReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
          Invocation.method(#removePrivateRoom, [request], {#options: options}),
          returnValue:
              _FakeResponseFuture_8<_i15.RemovePrivateRoomRes>()) as _i9
          .ResponseFuture<_i15.RemovePrivateRoomRes>);
  @override
  _i9.ResponseFuture<_i15.SearchInMessagesRes> searchInMessages(
          _i15.SearchInMessagesReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
          Invocation.method(#searchInMessages, [request], {#options: options}),
          returnValue:
              _FakeResponseFuture_8<_i15.SearchInMessagesRes>()) as _i9
          .ResponseFuture<_i15.SearchInMessagesRes>);
  @override
  _i9.ResponseFuture<_i15.SendGlitchRes> sendGlitch(_i15.SendGlitchReq? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#sendGlitch, [request], {#options: options}),
              returnValue: _FakeResponseFuture_8<_i15.SendGlitchRes>())
          as _i9.ResponseFuture<_i15.SendGlitchRes>);
  @override
  _i10.ClientCall<Q, R> $createCall<Q, R>(
          _i9.ClientMethod<Q, R>? method, _i17.Stream<Q>? requests,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
          Invocation.method(
              #$createCall, [method, requests], {#options: options}),
          returnValue: _FakeClientCall_9<Q, R>()) as _i10.ClientCall<Q, R>);
  @override
  _i9.ResponseFuture<R> $createUnaryCall<Q, R>(
          _i9.ClientMethod<Q, R>? method, Q? request,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
          Invocation.method(
              #$createUnaryCall, [method, request], {#options: options}),
          returnValue: _FakeResponseFuture_8<R>()) as _i9.ResponseFuture<R>);
  @override
  _i9.ResponseStream<R> $createStreamingCall<Q, R>(
          _i9.ClientMethod<Q, R>? method, _i17.Stream<Q>? requests,
          {_i9.CallOptions? options}) =>
      (super.noSuchMethod(
          Invocation.method(
              #$createStreamingCall, [method, requests], {#options: options}),
          returnValue: _FakeResponseStream_10<R>()) as _i9.ResponseStream<R>);
}

/// A class which mocks [SharedDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedDao extends _i1.Mock implements _i46.SharedDao {
  @override
  _i17.Future<String?> get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key]),
          returnValue: Future<String?>.value()) as _i17.Future<String?>);
  @override
  _i17.Stream<String?> getStream(String? key, {String? defaultValue}) =>
      (super.noSuchMethod(
          Invocation.method(#getStream, [key], {#defaultValue: defaultValue}),
          returnValue: Stream<String?>.empty()) as _i17.Stream<String?>);
  @override
  _i17.Future<void> put(String? key, String? value) => (super.noSuchMethod(
      Invocation.method(#put, [key, value]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<void> remove(String? key) => (super.noSuchMethod(
      Invocation.method(#remove, [key]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<bool> getBoolean(String? key, {bool? defaultValue = false}) =>
      (super.noSuchMethod(
          Invocation.method(#getBoolean, [key], {#defaultValue: defaultValue}),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Stream<bool> getBooleanStream(String? key,
          {bool? defaultValue = false}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getBooleanStream, [key], {#defaultValue: defaultValue}),
          returnValue: Stream<bool>.empty()) as _i17.Stream<bool>);
  @override
  _i17.Future<void> putBoolean(String? key, bool? value) => (super.noSuchMethod(
      Invocation.method(#putBoolean, [key, value]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
}

/// A class which mocks [AvatarRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAvatarRepo extends _i1.Mock implements _i47.AvatarRepo {
  @override
  _i17.Future<void> fetchAvatar(_i3.Uid? userUid,
          {bool? forceToUpdate = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #fetchAvatar, [userUid], {#forceToUpdate: forceToUpdate}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Stream<List<_i27.Avatar?>> getAvatar(_i3.Uid? userUid,
          {bool? forceToUpdate = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getAvatar, [userUid], {#forceToUpdate: forceToUpdate}),
              returnValue: Stream<List<_i27.Avatar?>>.empty())
          as _i17.Stream<List<_i27.Avatar?>>);
  @override
  _i17.Future<_i27.Avatar?> getLastAvatar(_i3.Uid? userUid,
          {bool? forceToUpdate = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getLastAvatar, [userUid], {#forceToUpdate: forceToUpdate}),
              returnValue: Future<_i27.Avatar?>.value())
          as _i17.Future<_i27.Avatar?>);
  @override
  _i17.Future<void> setMucAvatar(_i3.Uid? uid, String? path) =>
      (super.noSuchMethod(Invocation.method(#setMucAvatar, [uid, path]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  String? fastForwardAvatarFilePath(_i3.Uid? userUid) => (super.noSuchMethod(
      Invocation.method(#fastForwardAvatarFilePath, [userUid])) as String?);
  @override
  _i17.Stream<String> getLastAvatarFilePathStream(_i3.Uid? userUid,
          {bool? forceToUpdate = false}) =>
      (super.noSuchMethod(
          Invocation.method(#getLastAvatarFilePathStream, [userUid],
              {#forceToUpdate: forceToUpdate}),
          returnValue: Stream<String>.empty()) as _i17.Stream<String>);
  @override
  _i17.Future<void> uploadAvatar(String? path, _i3.Uid? uid) =>
      (super.noSuchMethod(Invocation.method(#uploadAvatar, [path, uid]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<void> deleteAvatar(_i27.Avatar? avatar) => (super.noSuchMethod(
      Invocation.method(#deleteAvatar, [avatar]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
}

/// A class which mocks [BlockDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlockDao extends _i1.Mock implements _i48.BlockDao {
  @override
  _i17.Future<bool> isBlocked(String? uid) =>
      (super.noSuchMethod(Invocation.method(#isBlocked, [uid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Stream<bool?> watchIsBlocked(String? uid) =>
      (super.noSuchMethod(Invocation.method(#watchIsBlocked, [uid]),
          returnValue: Stream<bool?>.empty()) as _i17.Stream<bool?>);
  @override
  _i17.Future<void> block(String? uid) => (super.noSuchMethod(
      Invocation.method(#block, [uid]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<void> unblock(String? uid) => (super.noSuchMethod(
      Invocation.method(#unblock, [uid]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
}

/// A class which mocks [I18N].
///
/// See the documentation for Mockito's code generation for more information.
class MockI18N extends _i1.Mock implements _i49.I18N {
  @override
  bool get isPersian =>
      (super.noSuchMethod(Invocation.getter(#isPersian), returnValue: false)
          as bool);
  @override
  _i17.Stream<dynamic> get localeStream =>
      (super.noSuchMethod(Invocation.getter(#localeStream),
          returnValue: Stream<dynamic>.empty()) as _i17.Stream<dynamic>);
  @override
  _i11.Locale get locale => (super.noSuchMethod(Invocation.getter(#locale),
      returnValue: _FakeLocale_11()) as _i11.Locale);
  @override
  String get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key]), returnValue: '')
          as String);
  @override
  String verb(String? key, {bool? isFirstPerson = false}) =>
      (super.noSuchMethod(
          Invocation.method(#verb, [key], {#isFirstPerson: isFirstPerson}),
          returnValue: '') as String);
  @override
  void changeLanguage(_i50.Language? language) =>
      super.noSuchMethod(Invocation.method(#changeLanguage, [language]),
          returnValueForMissingStub: null);
}

/// A class which mocks [MuteDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockMuteDao extends _i1.Mock implements _i51.MuteDao {
  @override
  _i17.Future<bool> isMuted(String? uid) =>
      (super.noSuchMethod(Invocation.method(#isMuted, [uid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Stream<bool> watchIsMuted(String? uid) =>
      (super.noSuchMethod(Invocation.method(#watchIsMuted, [uid]),
          returnValue: Stream<bool>.empty()) as _i17.Stream<bool>);
  @override
  _i17.Future<void> mute(String? uid) => (super.noSuchMethod(
      Invocation.method(#mute, [uid]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<void> unmute(String? uid) => (super.noSuchMethod(
      Invocation.method(#unmute, [uid]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
}

/// A class which mocks [UidIdNameDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockUidIdNameDao extends _i1.Mock implements _i52.UidIdNameDao {
  @override
  _i17.Future<_i53.UidIdName?> getByUid(String? uid) =>
      (super.noSuchMethod(Invocation.method(#getByUid, [uid]),
              returnValue: Future<_i53.UidIdName?>.value())
          as _i17.Future<_i53.UidIdName?>);
  @override
  _i17.Future<String?> getUidById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getUidById, [id]),
          returnValue: Future<String?>.value()) as _i17.Future<String?>);
  @override
  _i17.Future<void> update(String? uid, {String? id, String? name}) =>
      (super.noSuchMethod(
              Invocation.method(#update, [uid], {#id: id, #name: name}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<List<_i53.UidIdName>> search(String? text) => (super.noSuchMethod(
          Invocation.method(#search, [text]),
          returnValue: Future<List<_i53.UidIdName>>.value(<_i53.UidIdName>[]))
      as _i17.Future<List<_i53.UidIdName>>);
}

/// A class which mocks [ContactRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockContactRepo extends _i1.Mock implements _i54.ContactRepo {
  @override
  _i17.Future<void> syncContacts() => (super.noSuchMethod(
      Invocation.method(#syncContacts, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  void sendContacts(List<_i55.Contact>? contacts) =>
      super.noSuchMethod(Invocation.method(#sendContacts, [contacts]),
          returnValueForMissingStub: null);
  @override
  _i17.Future<bool> sendNewContact(_i55.Contact? contact) =>
      (super.noSuchMethod(Invocation.method(#sendNewContact, [contact]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Stream<List<_i56.Contact>> watchAll() =>
      (super.noSuchMethod(Invocation.method(#watchAll, []),
              returnValue: Stream<List<_i56.Contact>>.empty())
          as _i17.Stream<List<_i56.Contact>>);
  @override
  _i17.Future<List<_i56.Contact>> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
              returnValue: Future<List<_i56.Contact>>.value(<_i56.Contact>[]))
          as _i17.Future<List<_i56.Contact>>);
  @override
  _i17.Future<void> getContacts() => (super.noSuchMethod(
      Invocation.method(#getContacts, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<void> getUserIdByUid(_i3.Uid? uid) => (super.noSuchMethod(
      Invocation.method(#getUserIdByUid, [uid]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<void> fetchMemberId(_i57.Member? member) => (super.noSuchMethod(
      Invocation.method(#fetchMemberId, [member]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<List<_i3.Uid>> searchUser(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchUser, [query]),
              returnValue: Future<List<_i3.Uid>>.value(<_i3.Uid>[]))
          as _i17.Future<List<_i3.Uid>>);
  @override
  _i17.Future<_i56.Contact?> getContact(_i3.Uid? userUid) =>
      (super.noSuchMethod(Invocation.method(#getContact, [userUid]),
              returnValue: Future<_i56.Contact?>.value())
          as _i17.Future<_i56.Contact?>);
  @override
  _i17.Future<String?> getContactFromServer(_i3.Uid? contactUid) => (super
      .noSuchMethod(Invocation.method(#getContactFromServer, [contactUid]),
          returnValue: Future<String?>.value()) as _i17.Future<String?>);
  @override
  _i17.Future<bool> contactIsExist(
          String? countryCode, String? nationalNumber) =>
      (super.noSuchMethod(
          Invocation.method(#contactIsExist, [countryCode, nationalNumber]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
}

/// A class which mocks [AccountRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountRepo extends _i1.Mock implements _i58.AccountRepo {
  @override
  _i17.Future<bool> hasProfile({bool? retry = false}) =>
      (super.noSuchMethod(Invocation.method(#hasProfile, [], {#retry: retry}),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> profileInfoIsSet() =>
      (super.noSuchMethod(Invocation.method(#profileInfoIsSet, []),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> fetchCurrentUserId({bool? retry = false}) => (super
      .noSuchMethod(Invocation.method(#fetchCurrentUserId, [], {#retry: retry}),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<_i12.Account> getAccount() =>
      (super.noSuchMethod(Invocation.method(#getAccount, []),
              returnValue: Future<_i12.Account>.value(_FakeAccount_12()))
          as _i17.Future<_i12.Account>);
  @override
  _i17.Future<bool> checkUserName(String? username) =>
      (super.noSuchMethod(Invocation.method(#checkUserName, [username]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> setAccountDetails(String? username, String? firstName,
          String? lastName, String? email) =>
      (super.noSuchMethod(
          Invocation.method(
              #setAccountDetails, [username, firstName, lastName, email]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> enableTwoStepVerification(String? pas) =>
      (super.noSuchMethod(Invocation.method(#enableTwoStepVerification, [pas]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> disableTwoStepVerification(String? password) => (super
      .noSuchMethod(Invocation.method(#disableTwoStepVerification, [password]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<List<_i29.Session>> getSessions() =>
      (super.noSuchMethod(Invocation.method(#getSessions, []),
              returnValue: Future<List<_i29.Session>>.value(<_i29.Session>[]))
          as _i17.Future<List<_i29.Session>>);
  @override
  _i17.Future<void> checkUpdatePlatformSessionInformation() =>
      (super.noSuchMethod(
              Invocation.method(#checkUpdatePlatformSessionInformation, []),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  bool shouldRemoveDB(String? previousVersion) =>
      (super.noSuchMethod(Invocation.method(#shouldRemoveDB, [previousVersion]),
          returnValue: false) as bool);
  @override
  bool shouldMigrateDB(String? previousVersion) => (super.noSuchMethod(
      Invocation.method(#shouldMigrateDB, [previousVersion]),
      returnValue: false) as bool);
  @override
  bool shouldUpdateSessionPlatformInformation(String? previousVersion) =>
      (super.noSuchMethod(
          Invocation.method(
              #shouldUpdateSessionPlatformInformation, [previousVersion]),
          returnValue: false) as bool);
  @override
  bool shouldShowNewFeaturesDialog(String? previousVersion) =>
      (super.noSuchMethod(
          Invocation.method(#shouldShowNewFeaturesDialog, [previousVersion]),
          returnValue: false) as bool);
  @override
  _i17.Future<bool> verifyQrCodeToken(String? token) =>
      (super.noSuchMethod(Invocation.method(#verifyQrCodeToken, [token]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> revokeSession(String? session) =>
      (super.noSuchMethod(Invocation.method(#revokeSession, [session]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> revokeAllOtherSession() =>
      (super.noSuchMethod(Invocation.method(#revokeAllOtherSession, []),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<void> logOut() => (super.noSuchMethod(
      Invocation.method(#logOut, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<String> getName() =>
      (super.noSuchMethod(Invocation.method(#getName, []),
          returnValue: Future<String>.value('')) as _i17.Future<String>);
  @override
  _i17.Future<bool> shouldShowNewFeatureDialog() =>
      (super.noSuchMethod(Invocation.method(#shouldShowNewFeatureDialog, []),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> isTwoStepVerificationEnabled() =>
      (super.noSuchMethod(Invocation.method(#isTwoStepVerificationEnabled, []),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> changeTwoStepVerificationPassword(
          {String? currentPassword, String? newPassword}) =>
      (super.noSuchMethod(
          Invocation.method(#changeTwoStepVerificationPassword, [],
              {#currentPassword: currentPassword, #newPassword: newPassword}),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
}

/// A class which mocks [MucRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockMucRepo extends _i1.Mock implements _i59.MucRepo {
  @override
  _i17.Future<_i3.Uid?> createNewGroup(
          List<_i3.Uid>? memberUids, String? groupName, String? info) =>
      (super.noSuchMethod(
          Invocation.method(#createNewGroup, [memberUids, groupName, info]),
          returnValue: Future<_i3.Uid?>.value()) as _i17.Future<_i3.Uid?>);
  @override
  _i17.Future<_i3.Uid?> createNewChannel(
          String? channelId,
          List<_i3.Uid>? memberUids,
          String? channelName,
          _i7.ChannelType? channelType,
          String? info) =>
      (super.noSuchMethod(
          Invocation.method(#createNewChannel,
              [channelId, memberUids, channelName, channelType, info]),
          returnValue: Future<_i3.Uid?>.value()) as _i17.Future<_i3.Uid?>);
  @override
  _i17.Future<bool> channelIdIsAvailable(String? id) =>
      (super.noSuchMethod(Invocation.method(#channelIdIsAvailable, [id]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<void> fetchGroupMembers(_i3.Uid? groupUid, int? len) => (super
          .noSuchMethod(Invocation.method(#fetchGroupMembers, [groupUid, len]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
      as _i17.Future<void>);
  @override
  _i17.Future<String?> getGroupJointToken({_i3.Uid? groupUid}) =>
      (super.noSuchMethod(
          Invocation.method(#getGroupJointToken, [], {#groupUid: groupUid}),
          returnValue: Future<String?>.value()) as _i17.Future<String?>);
  @override
  _i17.Future<String?> getChannelJointToken({_i3.Uid? channelUid}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getChannelJointToken, [], {#channelUid: channelUid}),
          returnValue: Future<String?>.value()) as _i17.Future<String?>);
  @override
  _i17.Future<void> fetchChannelMembers(_i3.Uid? channelUid, int? len) =>
      (super.noSuchMethod(
              Invocation.method(#fetchChannelMembers, [channelUid, len]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<_i60.Muc?> fetchMucInfo(_i3.Uid? mucUid) =>
      (super.noSuchMethod(Invocation.method(#fetchMucInfo, [mucUid]),
          returnValue: Future<_i60.Muc?>.value()) as _i17.Future<_i60.Muc?>);
  @override
  _i17.Future<bool> isMucAdminOrOwner(String? memberUid, String? mucUid) =>
      (super.noSuchMethod(
          Invocation.method(#isMucAdminOrOwner, [memberUid, mucUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> isMucOwner(String? userUid, String? mucUid) =>
      (super.noSuchMethod(Invocation.method(#isMucOwner, [userUid, mucUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<void> updateMuc(_i60.Muc? muc) => (super.noSuchMethod(
      Invocation.method(#updateMuc, [muc]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i17.Future<List<_i57.Member>> searchMemberByNameOrId(String? mucUid) =>
      (super.noSuchMethod(Invocation.method(#searchMemberByNameOrId, [mucUid]),
              returnValue: Future<List<_i57.Member>>.value(<_i57.Member>[]))
          as _i17.Future<List<_i57.Member>>);
  @override
  _i17.Future<List<_i57.Member?>> getAllMembers(String? mucUid) =>
      (super.noSuchMethod(Invocation.method(#getAllMembers, [mucUid]),
              returnValue: Future<List<_i57.Member?>>.value(<_i57.Member?>[]))
          as _i17.Future<List<_i57.Member?>>);
  @override
  _i17.Stream<List<_i57.Member?>> watchAllMembers(String? mucUid) =>
      (super.noSuchMethod(Invocation.method(#watchAllMembers, [mucUid]),
              returnValue: Stream<List<_i57.Member?>>.empty())
          as _i17.Stream<List<_i57.Member?>>);
  @override
  _i17.Future<_i60.Muc?> getMuc(String? mucUid) =>
      (super.noSuchMethod(Invocation.method(#getMuc, [mucUid]),
          returnValue: Future<_i60.Muc?>.value()) as _i17.Future<_i60.Muc?>);
  @override
  _i17.Stream<_i60.Muc?> watchMuc(String? mucUid) =>
      (super.noSuchMethod(Invocation.method(#watchMuc, [mucUid]),
          returnValue: Stream<_i60.Muc?>.empty()) as _i17.Stream<_i60.Muc?>);
  @override
  _i17.Future<bool> removeMuc(_i3.Uid? mucUid) =>
      (super.noSuchMethod(Invocation.method(#removeMuc, [mucUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<_i7.GetChannelRes?> getChannelInfo(_i3.Uid? channelUid) =>
      (super.noSuchMethod(Invocation.method(#getChannelInfo, [channelUid]),
              returnValue: Future<_i7.GetChannelRes?>.value())
          as _i17.Future<_i7.GetChannelRes?>);
  @override
  _i17.Future<void> changeGroupMemberRole(_i57.Member? groupMember) =>
      (super.noSuchMethod(
              Invocation.method(#changeGroupMemberRole, [groupMember]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<void> changeChannelMemberRole(_i57.Member? channelMember) =>
      (super.noSuchMethod(
              Invocation.method(#changeChannelMemberRole, [channelMember]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<bool> leaveMuc(_i3.Uid? mucUid) =>
      (super.noSuchMethod(Invocation.method(#leaveMuc, [mucUid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> kickGroupMembers(List<_i57.Member>? groupMembers) =>
      (super.noSuchMethod(Invocation.method(#kickGroupMembers, [groupMembers]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> kickChannelMembers(List<_i57.Member>? channelMembers) =>
      (super.noSuchMethod(
          Invocation.method(#kickChannelMembers, [channelMembers]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<void> banGroupMember(_i57.Member? groupMember) =>
      (super.noSuchMethod(Invocation.method(#banGroupMember, [groupMember]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<void> banChannelMember(_i57.Member? channelMember) =>
      (super.noSuchMethod(Invocation.method(#banChannelMember, [channelMember]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<void> unBanGroupMember(_i57.Member? groupMember) =>
      (super.noSuchMethod(Invocation.method(#unBanGroupMember, [groupMember]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<void> unBanChannelMember(_i57.Member? channelMember) => (super
          .noSuchMethod(Invocation.method(#unBanChannelMember, [channelMember]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
      as _i17.Future<void>);
  @override
  _i17.Future<_i60.Muc?> joinGroup(_i3.Uid? groupUid, String? token) =>
      (super.noSuchMethod(Invocation.method(#joinGroup, [groupUid, token]),
          returnValue: Future<_i60.Muc?>.value()) as _i17.Future<_i60.Muc?>);
  @override
  _i17.Future<_i60.Muc?> joinChannel(_i3.Uid? channelUid, String? token) =>
      (super.noSuchMethod(Invocation.method(#joinChannel, [channelUid, token]),
          returnValue: Future<_i60.Muc?>.value()) as _i17.Future<_i60.Muc?>);
  @override
  _i17.Future<void> modifyGroup(String? mucId, String? name, String? info) =>
      (super.noSuchMethod(Invocation.method(#modifyGroup, [mucId, name, info]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<void> modifyChannel(
          String? mucUid, String? name, String? id, String? info) =>
      (super.noSuchMethod(
              Invocation.method(#modifyChannel, [mucUid, name, id, info]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<bool> sendMembers(_i3.Uid? mucUid, List<_i3.Uid>? memberUids) =>
      (super.noSuchMethod(Invocation.method(#sendMembers, [mucUid, memberUids]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<void> updateMemberListOfMUC(
          _i3.Uid? mucUid, List<_i57.Member>? members) =>
      (super.noSuchMethod(
              Invocation.method(#updateMemberListOfMUC, [mucUid, members]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i13.Role getRole(_i61.MucRole? role) =>
      (super.noSuchMethod(Invocation.method(#getRole, [role]),
          returnValue: _FakeRole_13()) as _i13.Role);
  @override
  _i61.MucRole getLocalRole(_i13.Role? role) =>
      (super.noSuchMethod(Invocation.method(#getLocalRole, [role]),
          returnValue: _i61.MucRole.NONE) as _i61.MucRole);
  @override
  _i17.Future<List<_i53.UidIdName?>> getFilteredMember(String? roomUid,
          {String? query}) =>
      (super.noSuchMethod(
              Invocation.method(#getFilteredMember, [roomUid], {#query: query}),
              returnValue:
                  Future<List<_i53.UidIdName?>>.value(<_i53.UidIdName?>[]))
          as _i17.Future<List<_i53.UidIdName?>>);
}

/// A class which mocks [BotRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockBotRepo extends _i1.Mock implements _i62.BotRepo {
  @override
  _i17.Future<_i14.BotInfo> fetchBotInfo(_i3.Uid? botUid) =>
      (super.noSuchMethod(Invocation.method(#fetchBotInfo, [botUid]),
              returnValue: Future<_i14.BotInfo>.value(_FakeBotInfo_14()))
          as _i17.Future<_i14.BotInfo>);
  @override
  _i17.Future<_i14.BotInfo?> getBotInfo(_i3.Uid? botUid) =>
      (super.noSuchMethod(Invocation.method(#getBotInfo, [botUid]),
              returnValue: Future<_i14.BotInfo?>.value())
          as _i17.Future<_i14.BotInfo?>);
  @override
  _i17.Future<List<_i3.Uid>> searchBotByName(String? name) =>
      (super.noSuchMethod(Invocation.method(#searchBotByName, [name]),
              returnValue: Future<List<_i3.Uid>>.value(<_i3.Uid>[]))
          as _i17.Future<List<_i3.Uid>>);
}

/// A class which mocks [CustomNotificationDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomNotificationDao extends _i1.Mock
    implements _i63.CustomNotificationDao {
  @override
  _i17.Future<bool> isHaveCustomNotif(String? uid) =>
      (super.noSuchMethod(Invocation.method(#isHaveCustomNotif, [uid]),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<void> setCustomNotif(String? uid, String? fileName) =>
      (super.noSuchMethod(Invocation.method(#setCustomNotif, [uid, fileName]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  _i17.Future<String?> getCustomNotif(String? uid) =>
      (super.noSuchMethod(Invocation.method(#getCustomNotif, [uid]),
          returnValue: Future<String?>.value()) as _i17.Future<String?>);
}

/// A class which mocks [MediaDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockMediaDao extends _i1.Mock implements _i64.MediaDao {
  @override
  _i17.Future<List<_i65.Media>> get(
          String? roomId, _i66.MediaType? type, int? limit, int? offset) =>
      (super.noSuchMethod(
              Invocation.method(#get, [roomId, type, limit, offset]),
              returnValue: Future<List<_i65.Media>>.value(<_i65.Media>[]))
          as _i17.Future<List<_i65.Media>>);
  @override
  _i17.Future<List<_i65.Media>> getByRoomIdAndType(
          String? roomUid, _i66.MediaType? type) =>
      (super.noSuchMethod(
              Invocation.method(#getByRoomIdAndType, [roomUid, type]),
              returnValue: Future<List<_i65.Media>>.value(<_i65.Media>[]))
          as _i17.Future<List<_i65.Media>>);
  @override
  _i17.Future<dynamic> save(_i65.Media? media) =>
      (super.noSuchMethod(Invocation.method(#save, [media]),
          returnValue: Future<dynamic>.value()) as _i17.Future<dynamic>);
  @override
  _i17.Future<int?> getIndexOfMedia(String? roomUid, int? messageId) => (super
      .noSuchMethod(Invocation.method(#getIndexOfMedia, [roomUid, messageId]),
          returnValue: Future<int?>.value()) as _i17.Future<int?>);
  @override
  _i17.Future<dynamic> deleteMedia(String? roomId, int? messageId) =>
      (super.noSuchMethod(Invocation.method(#deleteMedia, [roomId, messageId]),
          returnValue: Future<dynamic>.value()) as _i17.Future<dynamic>);
  @override
  _i17.Future<dynamic> clear(String? roomId) =>
      (super.noSuchMethod(Invocation.method(#clear, [roomId]),
          returnValue: Future<dynamic>.value()) as _i17.Future<dynamic>);
}

/// A class which mocks [MediaRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockMediaRepo extends _i1.Mock implements _i67.MediaRepo {
  @override
  _i17.Future<void> fetchMediaMetaData(_i3.Uid? uid,
          {bool? updateAllMedia = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #fetchMediaMetaData, [uid], {#updateAllMedia: updateAllMedia}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub:
              Future<void>.value()) as _i17.Future<void>);
  @override
  void saveMediaMetaData(_i68.MediaMetaData? metaData) =>
      super.noSuchMethod(Invocation.method(#saveMediaMetaData, [metaData]),
          returnValueForMissingStub: null);
  @override
  _i17.Future<_i68.MediaMetaData?> getMediaMetaData(String? roomUid) =>
      (super.noSuchMethod(Invocation.method(#getMediaMetaData, [roomUid]),
              returnValue: Future<_i68.MediaMetaData?>.value())
          as _i17.Future<_i68.MediaMetaData?>);
  @override
  _i17.Future<void> updateMediaMetaData(
          _i3.Uid? roomUid, _i15.GetMediaMetadataRes? mediaResponse) =>
      (super.noSuchMethod(
              Invocation.method(#updateMediaMetaData, [roomUid, mediaResponse]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i17.Future<void>);
  @override
  void checkNeedFetchMedia(
          String? roomUid,
          _i68.MediaMetaData? oldMediaMetaData,
          _i15.GetMediaMetadataRes? getMediaMetadataRes) =>
      super.noSuchMethod(
          Invocation.method(#checkNeedFetchMedia,
              [roomUid, oldMediaMetaData, getMediaMetadataRes]),
          returnValueForMissingStub: null);
  @override
  _i17.Future<dynamic> fetchLastMedia(String? roomUid, int? imagesCount,
          _i15.FetchMediasReq_MediaType? mediaType, int? allImageCount) =>
      (super.noSuchMethod(
          Invocation.method(#fetchLastMedia,
              [roomUid, imagesCount, mediaType, allImageCount]),
          returnValue: Future<dynamic>.value()) as _i17.Future<dynamic>);
  @override
  _i17.Stream<_i68.MediaMetaData?> getMediasMetaDataCountFromDB(
          _i3.Uid? roomId) =>
      (super.noSuchMethod(
              Invocation.method(#getMediasMetaDataCountFromDB, [roomId]),
              returnValue: Stream<_i68.MediaMetaData?>.empty())
          as _i17.Stream<_i68.MediaMetaData?>);
  @override
  _i17.Future<List<_i65.Media>> getLastMediasList(
          _i3.Uid? roomId,
          _i15.FetchMediasReq_MediaType? mediaType,
          int? pointer,
          _i15.FetchMediasReq_FetchingDirectionType? directionType) =>
      (super.noSuchMethod(
              Invocation.method(#getLastMediasList,
                  [roomId, mediaType, pointer, directionType]),
              returnValue: Future<List<_i65.Media>>.value(<_i65.Media>[]))
          as _i17.Future<List<_i65.Media>>);
  @override
  _i66.MediaType findFetchedMediaType(
          _i15.FetchMediasReq_MediaType? mediaType) =>
      (super.noSuchMethod(Invocation.method(#findFetchedMediaType, [mediaType]),
          returnValue: _i66.MediaType.IMAGE) as _i66.MediaType);
  @override
  _i15.FetchMediasReq_MediaType convertType(_i66.MediaType? mediaType) =>
      (super.noSuchMethod(Invocation.method(#convertType, [mediaType]),
              returnValue: _FakeFetchMediasReq_MediaType_15())
          as _i15.FetchMediasReq_MediaType);
  @override
  _i17.Future<List<_i65.Media>?> getMediaPage(
          String? roomUid, _i66.MediaType? type, int? page, int? index) =>
      (super.noSuchMethod(
              Invocation.method(#getMediaPage, [roomUid, type, page, index]),
              returnValue: Future<List<_i65.Media>?>.value())
          as _i17.Future<List<_i65.Media>?>);
  @override
  void saveMediaFromMessage(_i20.Message? message) =>
      super.noSuchMethod(Invocation.method(#saveMediaFromMessage, [message]),
          returnValueForMissingStub: null);
  @override
  _i17.Future<List<_i65.Media>?> fetchMoreMedia(String? roomUid,
          _i15.FetchMediasReq_MediaType? mediaType, int? pointer) =>
      (super.noSuchMethod(
              Invocation.method(#fetchMoreMedia, [roomUid, mediaType, pointer]),
              returnValue: Future<List<_i65.Media>?>.value())
          as _i17.Future<List<_i65.Media>?>);
  @override
  String findFetchedMediaJson(_i69.Media? media) =>
      (super.noSuchMethod(Invocation.method(#findFetchedMediaJson, [media]),
          returnValue: '') as String);
  @override
  String buildJsonFromFile(_i33.File? file) =>
      (super.noSuchMethod(Invocation.method(#buildJsonFromFile, [file]),
          returnValue: '') as String);
  @override
  _i17.Future<void> updateMedia(_i20.Message? message) => (super.noSuchMethod(
      Invocation.method(#updateMedia, [message]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i17.Future<void>);
  @override
  _i66.MediaType loadTypeFromString(String? type) =>
      (super.noSuchMethod(Invocation.method(#loadTypeFromString, [type]),
          returnValue: _i66.MediaType.IMAGE) as _i66.MediaType);
}

/// A class which mocks [MediaMetaDataDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockMediaMetaDataDao extends _i1.Mock implements _i70.MediaMetaDataDao {
  @override
  _i17.Future<dynamic> save(_i68.MediaMetaData? mediaMetaData) =>
      (super.noSuchMethod(Invocation.method(#save, [mediaMetaData]),
          returnValue: Future<dynamic>.value()) as _i17.Future<dynamic>);
  @override
  _i17.Stream<_i68.MediaMetaData?> get(String? roomUid) =>
      (super.noSuchMethod(Invocation.method(#get, [roomUid]),
              returnValue: Stream<_i68.MediaMetaData?>.empty())
          as _i17.Stream<_i68.MediaMetaData?>);
  @override
  _i17.Future<_i68.MediaMetaData?> getAsFuture(String? roomUid) =>
      (super.noSuchMethod(Invocation.method(#getAsFuture, [roomUid]),
              returnValue: Future<_i68.MediaMetaData?>.value())
          as _i17.Future<_i68.MediaMetaData?>);
  @override
  _i17.Future<dynamic> clear(String? roomUid) =>
      (super.noSuchMethod(Invocation.method(#clear, [roomUid]),
          returnValue: Future<dynamic>.value()) as _i17.Future<dynamic>);
}
